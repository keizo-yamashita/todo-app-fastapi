---
alwaysApply: true
---

# 共通ルール

フロントエンド・バックエンド共通の開発ルールです。
コード生成・リファクタリング・レビュー時に以下のルールに従ってください。

## プロジェクト構成

### ディレクトリ構成

このプロジェクトはモノレポ構成を採用しており、フロントエンドとバックエンドを単一リポジトリで管理しています。

```
└── app/
   ├── backend/  # バックエンド（FastAPI）
   └── frontend/ # フロントエンド（Next.js）
```

詳細なディレクトリ構成については、以下を参照してください：
- **バックエンド**: `../01-backend/01-software-architecture.mdc`
- **フロントエンド**: `../02-frontend/01-software-architecture.mdc`（未作成）

### 技術スタック詳細

詳細な技術スタックについては、以下を参照してください：
- **バックエンド**: `../01-backend/00-tech-stack.mdc`
- **フロントエンド**: `../02-frontend/00-tech-stack.mdc`（未作成）

## コーディングスタイル

### 設計原則

#### DRY（Don't Repeat Yourself）原則
- 同じコードを複数箇所に書かない
- 重複したロジックは関数・クラス・モジュールに抽出する

#### KISS（Keep It Simple, Stupid / 単純さの維持）原則
- **可読性を最優先**とし、複雑な実装よりもわかりやすい実装を採用する

#### その他の原則
- 深いネストは避け、早期Returnを徹底する
- マジックナンバーを使用せず、意味のある名前で必ず定数化する

### フォーマット
- プロジェクトの**フォーマッター設定**に従う（具体的なツールは各言語のルールで定義）

### 命名規則
- **各言語で定義する命名規則に従う**（具体的なルールは各言語のルールで定義）

#### メソッドの命名規則
- 名前は`どうやって`ではなく、**何をするか**を簡潔に表現する
- **データを変更するかどうか**が分かる動詞を使う
  - 参照系: `get`, `find`, `calculate`, `check`
  - 更新系: `create`, `update`, `delete`, `apply`
  - 判定系: `is`, `has`, `can`, `should`
- 名前と処理内容を一致させる
- 実装が複雑になったら関数を分割する（目安: 1関数30行以内）

### コメントの基本原則

> **重要**: コード内のコメントは **日本語** で記載してください。

#### コメント記述の原則
* ロジック変更時、同時に必ずコメントも変更すること
* ロジックの内容をなぞるだけのコメントをしないこと
* 可読性の悪いロジックを補足説明するようなコメントはせず、代わりにロジックの可読性を高めること
* ロジックの意図や仕様変更時の注意点があればコメントすること

### コメントの種類と記述ルール

#### インラインコメント

##### 基本ルール
- コードの意図や仕様変更時の注意点を記述する
- ロジックの「なぜそうするか」を説明する

##### 書くべき内容
- **境界条件**: 処理の対象範囲や制限事項

#### ドキュメントコメント

##### 基本ルール
- すべての関数・メソッド・クラスには**必ず**ドキュメントコメントを記述する。  
- TypeScriptの場合は**TSDoc**、Pythonの場合は**Google docstring**を用いる。  
- 最低限、**引数・戻り値・例外**を明示する。

##### 書くべき内容

###### 関数・メソッドの場合
- **機能の説明**: 何をする関数・メソッドなのか
- **引数の説明**: 各引数の役割と型、制約
- **戻り値の説明**: 戻り値の型と内容
- **例外の説明**: 発生する可能性のある例外とその条件
- **注意事項**: 使用時の制約や注意点

###### クラスの場合
- **クラスの目的**: 何を表現するクラスなのか
- **注意事項**: 使用時の制約や注意点

## 品質保証

### 品質チェックの実行ルール

- **コードを追加・修正した時**は、以下をすべて実行してパスすることを確認する：
  - **整形チェック**: フォーマッターで差分0を確認
  - **静的解析**: リンターでエラー・警告0を確認  
  - **型チェック**: 型チェッカーで型エラー0を確認
  - **テスト**: 全テストがパスすることを確認
- **コミット前**: 上記すべてが完了していることを確認する
- **機能変更時**: 関連するテスト・型定義・スキーマ・コメントも同時に更新する

