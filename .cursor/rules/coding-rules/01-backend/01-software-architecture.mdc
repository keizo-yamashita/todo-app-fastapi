---
globs: app/backend/src/**/*.py
alwaysApply: false
---

# バックエンド (FastAPI): ソフトウェアアーキテクチャ

バックエンドのソフトウェアアーキテクチャに関するルールです。
プロジェクト構造・設計・実装時に以下のルールに従ってください。

## アーキテクチャ
バックエンドのアーキテクチャは**オニオンアーキテクチャ**を採用する。  
※ わかりやすさのため**Application/Service**を**UseCase**と呼ぶ。

### レイヤー構成
```
┌──────────────────────┐
│ Presentation Layer   │← APIエンドポイント
├──────────────────────┤
│ UseCase Layer        │← ビジネスロジック
├──────────────────────┤
│ Domain Layer         │← ドメインモデル
├──────────────────────┤
│ Infrastructure Layer │← DB, 外部API, ローカルストレージへのアクセス
└──────────────────────┘
```

## ディレクトリ構造
```
app/backend/src/
├─ domain/ # ドメイン層（外部に依存しない）
│  └─ user/ # ユーザー集約
│     ├─ user.py # エンティティ
│     ├─ id.py # 値オブジェクト
│     ├─ email_address.py # 値オブジェクト
│     ├─ name.py # 値オブジェクト
│     ├─ role.py # 値オブジェクト
│     └─ repository.py # リポジトリインターフェース
├─ usecase/ # ユースケース層（アプリケーションサービス）
│  └─ user/
│     ├── create_user_usecase.py # ユースケース
│     ├── delete_user_usecase.py # ユースケース
│     ├── find_user_usecase.py # ユースケース
│     └── ...
├─ infrastructure/ # インフラ層（外部I/Oの具体実装）
│  ├─ repository/ # リポジトリ実装
│  │  └─ user/
│  │     └─ user_repository_impl.py
│  └─ models/ # DBモデル
│     └─ users.py
├─ presentation/ # プレゼンテーション層（外界との接点）
│  └─ api/ # FastAPIルータ/ハンドラ
│     ├─ routes/ # APIRouterによるエンドポイント定義
│     │  ├─ route.py # メインルータ
│     │  └─ user.py # ユーザールータ
│     └─ schema/ # I/O DTO（Pydantic BaseModel）
│        ├─ error_response.py # エラーレスポンススキーマ
│        └─ user/ # ユーザー関連スキーマ
│           ├─ create_user_request.py
│           ├─ create_user_response.py
│           ├─ find_user_request.py
│           ├─ delete_user_request.py
│           ├─ ...
│           └─ user.py
└─ main.py # アプリケーションエントリポイント
```

## DDDに基づく構造ルール

### ドメイン層（`app/backend/src/domain/`）
他の層に依存しないコアロジック。ドメインオブジェクト（エンティティ、値オブジェクト、ドメインイベント）を配置。

- **禁止事項**：I/O処理、フレームワーク依存、ORMなどの技術詳細
- **配置するもの**：エンティティ、値オブジェクト、ドメインイベント、ドメインサービス、抽象リポジトリ
- **原則**：純粋なビジネスルールのみを実装し、外部ライブラリへの依存を最小化

### ユースケース層/アプリケーション層（`app/backend/src/usecase/`）
ドメイン層とインフラ層のインターフェースを利用してアプリケーション固有ロジックを実装。他レイヤーの詳細に依存しない。

- **責務**：アプリケーション固有のユースケースの調停（トランザクション境界の定義、ドメイン呼び出し、整合性の担保）
- **依存関係**：ドメインの抽象インターフェースにのみ依存（具体実装は知らない）
- **制約**：入出力のシリアライズやHTTP変換は扱わない（Presentation層に委譲）

### インフラ層（`app/backend/src/infrastructure/`）
ドメイン層のインターフェース（例：Repository）を実装。外部システムとの連携（DB、API、ファイルシステム）。

- **責務**：ドメインの抽象インターフェースの具体実装、外部システムとの連携
- **配置するもの**：ORMモデル、外部APIクライアント、リポジトリ実装、マイグレーション補助
- **原則**：外部サービス仕様の変更をこの層で吸収し、内側への影響を防ぐ

### プレゼンテーション層（`app/backend/src/presentation/`）
APIエンドポイント。ユースケース層を呼び出し、結果を整形。DIコンテナの構成などもここで行う。

- **責務**：外部インターフェース（HTTP API）の提供、ユースケースの呼び出し
- **配置するもの**：FastAPIルータ、RequestやResponseのPydanticスキーマ、依存注入の構成
- **制約**：ビジネスロジックは持たず、入出力の変換・認可チェック・例外変換に限定

## 共通ルール

### 依存関係の原則
- **上位レイヤーは下位レイヤーに依存するが、逆は不可**（依存性の逆転は除く）
- **内側の層は抽象インターフェースにのみ依存**（DIP：依存性逆転の原則）

### 各層の責務遵守
- **各層の責務を逸脱しない**（例：ドメイン層にI/OやUIロジックを含めない）
- **ユビキタス言語に基づいた命名**を使用する
- **境界の明確化**：DTOとドメインオブジェクトを混在させない
