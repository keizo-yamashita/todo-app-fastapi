---
description: GitコミットメッセージのConventional Commits仕様とコミット操作のルール
alwaysApply: false
---

# Git操作ルール: コミットメッセージ

Git操作におけるコミットメッセージの作成ルールです。
コミットメッセージ作成時に以下のルールに従ってください。

## Conventional Commits

コミットメッセージは **Conventional Commits** の仕様に従って作成してください。

> **重要**: コミットメッセージは **日本語** で記載してください。

### 基本ルール

#### フォーマット
```
<type>[optional scope]: <description>
```

#### よく使う type
- **feat**: 新しい機能の追加
- **fix**: バグ修正
- **docs**: ドキュメントの変更（READMEなど）
- **style**: コードの意味に影響しない変更（フォーマットやセミコロン、インデントなど）
- **refactor**: 機能追加やバグ修正ではないリファクタリング
- **test**: テストの追加や修正
- **chore**: ビルド、依存関係、設定ファイルなどの変更

#### scope（任意）
変更範囲を表すスコープを`()`で書けます。
```
例: feat(auth): ログインAPIを追加
```

#### description
簡潔に「何をしたか」を **日本語** で書きます。

#### 実践例
```bash
feat: ユーザーログインページを追加
fix: ユーザーサービスのnullポインタエラーを修正
docs: セットアップ手順をREADMEに追加
style: prettierでコードをフォーマット
test: ユーザー認証のテストケースを追加
chore: 依存関係を最新バージョンに更新
```

### 破壊的変更（BREAKING CHANGE）

#### 表記方法
1. **typeに`!`を付ける**
```bash
feat!: APIレスポンス形式を変更
```

2. **フッターに記載**
```bash
feat: 新しい認証システムを追加

BREAKING CHANGE: 既存の認証APIが削除されました
```

### ❌ よくある間違い
```bash
# typeがない
ユーザーログイン機能を追加

# 英語で記載
feat: add user login feature

# コロンとスペースがない
feat:ユーザーログイン機能を追加

# typeが大文字
FEAT: ユーザーログイン機能を追加
```
